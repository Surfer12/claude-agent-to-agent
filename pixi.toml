[project]
authors = ["Ryan Oates <ryanoatsie@outlook.com>"]
channels = ["https://conda.modular.com/max-nightly", "https://conda.modular.com/max", "https://repo.prefix.dev/modular-community", "conda-forge"]
name = "claude-agent-to-agent"
platforms = ["osx-arm64"]
version = "0.1.0"

[tasks]
# Main CLI commands - super intuitive!
cli = { cmd = "python enhanced_cli.py" }
chat = { cmd = "python enhanced_cli.py --tools think file_read file_write" }
quick = { cmd = "python enhanced_cli.py --prompt", depends-on = ["check-env"] }
demo = { cmd = "python enhanced_cli.py --prompt 'Hello! What tools do you have available?'" }

# Advanced usage
full = { cmd = "python enhanced_cli.py --tools all" }
dev = { cmd = "python enhanced_cli.py --tools all --verbose" }
simple = { cmd = "python enhanced_cli.py --tools think" }

# Testing shortcuts
test = { cmd = "python enhanced_cli.py --prompt 'What is 2+2?'" }
test-files = { cmd = "python enhanced_cli.py --prompt 'List files in current directory' --tools file_read" }

# CLI Testing - Comprehensive leaf node testing
test-cli-leaf = { cmd = "pytest tests/test_cli_leaf_nodes.py -v", description = "Test CLI leaf node components" }
test-cli-examples = { cmd = "pytest tests/test_cli_examples.py -v", description = "Test CLI example scripts" }
test-cli-all = { cmd = "pytest tests/test_cli_*.py -v", description = "Run all CLI tests" }
test-cli-coverage = { cmd = "pytest tests/test_cli_*.py --cov=unified_agent.cli --cov=quick_start --cov-report=html --cov-report=term", description = "CLI test coverage" }

# CLI Integration Testing
test-cli-integration = { cmd = "pytest tests/test_cli_integration.py -v", description = "Test CLI integration" }
test-cli-smoke = { cmd = "python enhanced_cli.py --help && python cli.py --help && (python quick_start.py --help || echo 'Quick start tested')", description = "CLI smoke tests" }

# Java implementation - Enhanced!
java-cli = { cmd = "mvn exec:java", depends-on = ["java-build"] }
java-chat = { cmd = "mvn exec:java -Dexec.args='--model claude-3-5-sonnet-20240620'", depends-on = ["java-build"] }
java-quick = { cmd = "mvn exec:java -Dexec.args='--prompt \"Hello from Java CLI!\"'", depends-on = ["java-build"] }
java-build = { cmd = "mvn clean compile" }
java-test = { cmd = "mvn test" }
java-package = { cmd = "mvn package" }
java-jar = { cmd = "java -jar target/claude-agent-cli-1.0-SNAPSHOT-jar-with-dependencies.jar", depends-on = ["java-package"] }

# Development tools
setup = { cmd = "if [ ! -f .env ]; then echo 'ANTHROPIC_API_KEY=your-key-here' > .env && echo '✅ Created .env file - please add your API key'; fi && python -m pip install -r requirements.txt && echo '✅ Setup complete! Run: pixi run cli'", depends-on = ["check-env"] }
java-setup = { cmd = ["mvn clean compile", "echo '✅ Java setup complete! Run: magic run java-cli'"] }

# Enhanced Code Quality (Pixi-based, no virtual env needed)
lint = { cmd = "flake8 enhanced_cli.py cli.py agents/ --max-line-length=88 --extend-ignore=E203,W503,E402" }
format = { cmd = ["black enhanced_cli.py cli.py agents/", "isort enhanced_cli.py cli.py agents/"] }
quality-check = { cmd = ["pixi run lint", "pixi run format", "pixi run type-check"], description = "Run all code quality checks" }
type-check = { cmd = "mypy enhanced_cli.py cli.py agents/ --ignore-missing-imports" }
security-scan = { cmd = "bandit -r . -f json -o bandit-report.json || echo 'Security scan completed'" }
test-coverage = { cmd = "pytest --cov=agents --cov-report=html --cov-report=term" }

# Git workflow helpers (no pre-commit hooks)
pre-push-check = { cmd = ["pixi run quality-check", "pixi run test-coverage"], description = "Manual quality check before pushing" }
git-status = { cmd = "git status && echo '✅ Ready for commit/push'" }
git-push-safe = { cmd = ["pixi run pre-push-check", "git add .", "git commit -m 'Auto-commit with quality checks'", "git push"], description = "Safe push with quality checks" }

check-env = { cmd = "python -c 'import os; exit(0 if os.getenv(\"ANTHROPIC_API_KEY\") else 1)' || echo '⚠️  Set ANTHROPIC_API_KEY: export ANTHROPIC_API_KEY=\"your-key\"'" }

# Legacy support
old-cli = { cmd = "python cli.py --interactive --tools think file_read file_write" }

[dependencies]
anthropic = ">=0.60.0,<0.61"
pip = ">=25.2,<26"
max = ">=25.6.0.dev2025080505,<26"
aiohttp = ">=3.12.15,<4"
aiostream = ">=0.7.0,<0.8"
jsonschema = ">=4.25.0,<5"
pixi = ">=0.50.2,<0.51"
black = ">=25.1.0,<26"
flake8 = ">=7.3.0,<8"
isort = ">=6.0.1,<7"
mypy = ">=1.17.1,<2"
bandit = ">=1.8.6,<2"
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"
pytest-mock = ">=3.14.1,<4"
pytest-asyncio = ">=1.1.0,<2"
pytest-subprocess = ">=1.5.3,<2"
pytest-timeout = ">=2.4.0,<3"
pytest-xdist = ">=3.8.0,<4"
mcp = ">=1.12.3,<2"
maven = ">=3.9.10,<4"
openjdk = ">=23.0.2,<24"
