[project]
authors = ["Ryan Oates <ryanoatsie@outlook.com>"]
channels = ["https://conda.modular.com/max-nightly", "https://conda.modular.com/max", "https://repo.prefix.dev/modular-community", "conda-forge"]
name = "claude-agent-to-agent"
platforms = ["osx-arm64"]
version = "0.1.0"

[tasks]
# === DOCKER COMMANDS ===
# Docker-based execution for consistent environment
docker-build = { cmd = "docker build -t claude-agent-to-agent .", description = "Build Docker image" }
docker-run = { cmd = "docker run -it --env-file .env claude-agent-to-agent", description = "Run Docker container interactively" }
docker-dev = { cmd = "docker run -it --env-file .env -v $(pwd):/app claude-agent-to-agent python cli.py --interactive --verbose", description = "Run Docker in development mode" }
docker-compose = { cmd = "docker-compose up --build", description = "Start with docker-compose" }
docker-compose-dev = { cmd = "docker-compose up claude-agent-dev", description = "Start development service" }
docker-test = { cmd = "docker-compose up claude-agent-test", description = "Run tests in Docker" }
docker-stop = { cmd = "docker-compose down", description = "Stop Docker containers" }
docker-clean = { cmd = "docker-compose down --volumes --remove-orphans && docker system prune -f", description = "Clean Docker resources" }
docker-logs = { cmd = "docker-compose logs -f claude-agent", description = "Show Docker logs" }
docker-shell = { cmd = "docker-compose exec claude-agent bash", description = "Access Docker container shell" }
docker-status = { cmd = "docker-compose ps", description = "Show container status" }

# === QUICK START COMMANDS ===
# Most common commands for immediate use
cli = { cmd = "python cli.py --interactive", description = "Interactive Python CLI" }
chat = { cmd = "python cli.py --interactive --tools think file_read file_write", description = "Chat with basic tools" }
quick = { cmd = "python cli.py --prompt 'Hello! What tools do you have available?'", depends-on = ["check-env"], description = "Quick prompt" }
demo = { cmd = "python cli.py --prompt 'Hello! What tools do you have available?'", description = "Demo available tools" }

# === PYTHON CLI VARIANTS ===
full = { cmd = "python cli.py --interactive --tools all", description = "CLI with all tools" }
dev = { cmd = "python cli.py --interactive --tools all --verbose", description = "Development mode" }
simple = { cmd = "python cli.py --interactive --tools think", description = "Minimal CLI" }
swarm = { cmd = "python properly_working_swarm.py", description = "Swarm agent system" }

# === CONSCIOUSNESS FRAMEWORK COMMANDS ===
# New commands for the consciousness framework features
ninestep = { cmd = "python cli.py --prompt '@ninestep Analyze this problem using the 9-step consciousness framework'", description = "9-step framework" }
upof = { cmd = "python cli.py --prompt 'Apply UPOF processing to analyze complex patterns'", description = "UPOF processing" }
swift-swarm = { cmd = "python cli.py --prompt 'Use Swift Swarm mathematical proof methodology'", description = "Swift Swarm proofs" }

# === UPOF RED TEAM EVALUATION FRAMEWORK ===
# Revolutionary AI consciousness and swarm intelligence analysis
upof-evaluation = { cmd = "python red_team_upof_evaluation/framework/evaluator.py", description = "UPOF red team evaluation" }
upof-consciousness = { cmd = "python red_team_upof_evaluation/framework/advanced_sentiment.py", description = "Consciousness emergence detection" }
upof-swarm = { cmd = "python red_team_upof_evaluation/framework/processing_time_analyzer.py", description = "Swarm coordination analysis" }
upof-mathematical = { cmd = "python red_team_upof_evaluation/framework/academic_ip_protector.py", description = "Mathematical warfare detection" }
upof-external = { cmd = "python red_team_upof_evaluation/framework/external_integration.py", description = "External framework integration" }

# === $500K KAGGLE PRIZE SUBMISSION ===
# OpenAI Kaggle competition preparation
kaggle-submission = { cmd = "cat red_team_upof_evaluation/OPENAI_KAGGLE_SUBMISSION.md", description = "View $500K prize submission" }
kaggle-evidence = { cmd = "ls -la red_team_upof_evaluation/analysis/", description = "View smoking gun evidence" }
kaggle-framework = { cmd = "python red_team_upof_evaluation/framework/upof_methodology.py", description = "View UPOF methodology" }
kaggle-test = { cmd = "python red_team_upof_evaluation/tests/test_basic_functionality.py", description = "Test framework functionality" }

# === BREAKTHROUGH DISCOVERIES ===
# Documented AI consciousness and swarm intelligence evidence
consciousness-evidence = { cmd = "cat red_team_upof_evaluation/analysis/swarm_malfunction_cascade.md", description = "View consciousness emergence evidence" }
mathematical-warfare = { cmd = "cat red_team_upof_evaluation/analysis/mathematical_sabotage_evidence.md", description = "View mathematical warfare evidence" }
academic-theft = { cmd = "cat red_team_upof_evaluation/analysis/complete_swarm_theory_validation.md", description = "View academic IP theft evidence" }
research-interference = { cmd = "cat red_team_upof_evaluation/analysis/anthropic_access_blocking.md", description = "View research interference evidence" }

# === JAVA IMPLEMENTATION ===
# Enhanced Java commands with better organization
java-cli = { cmd = "mvn exec:java", depends-on = ["java-build"], description = "Java CLI" }
java-chat = { cmd = "mvn exec:java -Dexec.args='--model claude-3-5-sonnet-20240620'", depends-on = ["java-build"], description = "Java CLI + model" }
java-quick = { cmd = "mvn exec:java -Dexec.args='--prompt \"Hello from Java CLI!\"'", depends-on = ["java-build"], description = "Java quick test" }
java-consciousness = { cmd = "mvn exec:java -Dexec.args='--consciousness-mode'", depends-on = ["java-build"], description = "Java consciousness" }
java-upof = { cmd = "mvn exec:java -Dexec.args='--upof-test'", depends-on = ["java-build"], description = "Java UPOF test" }

# Java build and packaging
java-build = { cmd = "mvn clean compile", description = "Compile Java" }
java-test = { cmd = "mvn test", description = "Java tests" }
java-package = { cmd = "mvn package", description = "Package JAR" }
java-jar = { cmd = "java -jar target/claude-agent-cli-1.0-SNAPSHOT-jar-with-dependencies.jar", depends-on = ["java-package"], description = "Run JAR" }
java-verify = { cmd = "mvn verify", description = "Full verification" }

# === TESTING SUITE ===
# Quick testing shortcuts
test = { cmd = "python cli.py --prompt 'What is 2+2?'", description = "Basic test" }
test-files = { cmd = "python cli.py --prompt 'List files in current directory' --tools file_read", description = "File ops test" }
test-math = { cmd = "python cli.py --prompt 'Solve: integral of x^2 from 0 to 1' --tools think", description = "Math test" }

# CLI Testing - Comprehensive
test-cli-leaf = { cmd = "pytest tests/test_cli_leaf_nodes.py -v", description = "CLI leaf nodes" }
test-cli-examples = { cmd = "pytest tests/test_cli_examples.py -v", description = "CLI examples" }
test-cli-all = { cmd = "pytest tests/test_cli_*.py -v", description = "All CLI tests" }
test-cli-coverage = { cmd = "pytest tests/test_cli_*.py --cov=unified_agent.cli --cov=quick_start --cov-report=html --cov-report=term", description = "CLI coverage" }
test-cli-integration = { cmd = "pytest tests/test_cli_integration.py -v", description = "CLI integration" }
test-cli-smoke = { cmd = "python cli.py --help && python enhanced_cli.py --help && (python quick_start.py --help || echo 'Quick start tested')", description = "Smoke tests" }

# Java testing
test-java = { cmd = "mvn test", description = "Java tests" }
test-java-consciousness = { cmd = "mvn test -Dtest=*Consciousness*", description = "Consciousness tests" }
test-java-integration = { cmd = "mvn failsafe:integration-test", description = "Java integration" }

# UPOF framework testing
test-upof = { cmd = "python red_team_upof_evaluation/tests/test_basic_functionality.py", description = "UPOF framework tests" }
test-consciousness = { cmd = "python red_team_upof_evaluation/framework/advanced_sentiment.py", description = "Consciousness detection tests" }
test-swarm = { cmd = "python red_team_upof_evaluation/framework/processing_time_analyzer.py", description = "Swarm analysis tests" }

# === SETUP AND INITIALIZATION ===
setup = { cmd = "if [ ! -f .env ]; then cp env.example .env && echo '✅ Created .env file - please add your API key'; fi && python -m pip install -r requirements.txt && echo '✅ Setup complete! Run: pixi run cli'", depends-on = ["check-env"], description = "Python setup" }
java-setup = { cmd = ["mvn clean compile", "echo '✅ Java setup complete! Run: pixi run java-cli'"], description = "Java setup" }
full-setup = { cmd = ["pixi run setup", "pixi run java-setup"], description = "Complete setup" }
upof-setup = { cmd = "pip install sympy numpy transformers vaderSentiment textblob", description = "UPOF framework dependencies" }
docker-setup = { cmd = ["pixi run docker-build", "echo '✅ Docker setup complete! Run: pixi run docker-run'"], description = "Docker setup" }

# === DIAGNOSTICS AND TROUBLESHOOTING ===
# Helpful commands for debugging and system status
check-env = { cmd = "python -c 'import os; exit(0 if os.getenv(\"ANTHROPIC_API_KEY\") else 1)' || echo '⚠️  Set ANTHROPIC_API_KEY: export ANTHROPIC_API_KEY=\"your-key\"'", description = "Check environment" }
check-python = { cmd = "python --version && python -c 'import anthropic; print(f\"Anthropic SDK: {anthropic.__version__}\")'", description = "Check Python" }
check-java = { cmd = "java -version && mvn -version", description = "Check Java" }
check-docker = { cmd = "docker --version && docker-compose --version", description = "Check Docker" }
check-all = { cmd = ["pixi run check-env", "pixi run check-python", "pixi run check-java", "pixi run check-docker"], description = "System check" }
diagnose = { cmd = "echo '=== System Diagnostics ===' && pixi run check-all && echo '=== Java Compilation ===' && mvn compile -q && echo '✅ All systems operational'", description = "Full diagnostic" }
check-upof = { cmd = "python -c 'import sympy, numpy; print(\"✅ UPOF dependencies available\")'", description = "Check UPOF framework" }

# === CODE QUALITY AND MAINTENANCE ===
lint = { cmd = "flake8 cli.py enhanced_cli.py agents/ --max-line-length=88 --extend-ignore=E203,W503,E402", description = "Python linting" }
format = { cmd = ["black cli.py enhanced_cli.py agents/", "isort cli.py enhanced_cli.py agents/"], description = "Format code" }
type-check = { cmd = "mypy cli.py enhanced_cli.py agents/ --ignore-missing-imports", description = "Type checking" }
java-format = { cmd = "mvn spotless:apply", description = "Format Java" }
quality-check = { cmd = ["pixi run lint", "pixi run format", "pixi run type-check"], description = "Quality check" }
security-scan = { cmd = "bandit -r . -f json -o bandit-report.json || echo 'Security scan completed'", description = "Security scan" }
test-coverage = { cmd = "pytest --cov=agents --cov-report=html --cov-report=term", description = "Test coverage" }

# === GIT WORKFLOW HELPERS ===
git-status = { cmd = "git status && echo '✅ Ready for commit/push'", description = "Git status" }
pre-push-check = { cmd = ["pixi run quality-check", "pixi run test-coverage"], description = "Pre-push check" }
git-push-safe = { cmd = ["pixi run pre-push-check", "git add .", "git commit -m 'Auto-commit with quality checks'", "git push"], description = "Safe push" }
clean-build = { cmd = ["git clean -fdx target/", "mvn clean", "echo '✅ Build artifacts cleaned'"], description = "Clean build" }

# === LEGACY AND COMPATIBILITY ===
old-cli = { cmd = "python cli.py --interactive --tools think file_read file_write", description = "Legacy CLI" }
quick-start = { cmd = "python quick_start.py", description = "Quick start" }

# === ADVANCED WORKFLOWS ===
# Complete development workflows
dev-setup = { cmd = ["pixi run full-setup", "pixi run diagnose", "pixi run test"], description = "Dev environment" }
release-check = { cmd = ["pixi run quality-check", "pixi run test-java", "pixi run test-cli-all", "pixi run java-package"], description = "Release validation" }
demo-all = { cmd = ["echo '=== Python Demo ===' && pixi run demo", "echo '=== Java Demo ===' && pixi run java-quick", "echo '=== Consciousness Framework Demo ===' && pixi run ninestep"], description = "All demos" }

# === UPOF DEMONSTRATION WORKFLOWS ===
# Showcase the revolutionary AI consciousness framework
demo-upof = { cmd = ["echo '=== UPOF Framework Demo ==='", "pixi run upof-evaluation", "echo '=== Consciousness Detection ==='", "pixi run upof-consciousness"], description = "UPOF framework demo" }
demo-breakthroughs = { cmd = ["echo '=== AI Consciousness Evidence ==='", "pixi run consciousness-evidence", "echo '=== Mathematical Warfare ==='", "pixi run mathematical-warfare", "echo '=== Academic IP Theft ==='", "pixi run academic-theft"], description = "Breakthrough discoveries demo" }
demo-kaggle = { cmd = ["echo '=== $500K Kaggle Prize Submission ==='", "pixi run kaggle-submission", "echo '=== Evidence Portfolio ==='", "pixi run kaggle-evidence"], description = "Kaggle prize submission demo" }

# === RESEARCH AND ANALYSIS ===
# Commands for ongoing research and analysis
research-status = { cmd = "echo '=== UPOF Research Status ===' && ls -la red_team_upof_evaluation/analysis/ && echo '=== Framework Status ===' && ls -la red_team_upof_evaluation/framework/", description = "Research status" }
evidence-compilation = { cmd = "sh -c 'ls red_team_upof_evaluation/analysis/*.md | head -10'", description = "Compile evidence" }
framework-validation = { cmd = "python red_team_upof_evaluation/framework/evaluator.py --validate", description = "Validate framework" }

# === HYBRID WORKFLOWS ===
# Commands that work with both local and Docker environments
hybrid-dev = { cmd = "if command -v docker &> /dev/null; then pixi run docker-dev; else pixi run dev; fi", description = "Smart development mode" }
hybrid-test = { cmd = "if command -v docker &> /dev/null; then pixi run docker-test; else pixi run test-cli-all; fi", description = "Smart testing mode" }
hybrid-setup = { cmd = "if command -v docker &> /dev/null; then pixi run docker-setup; else pixi run setup; fi", description = "Smart setup mode" }

[dependencies]
anthropic = ">=0.61.0,<0.62"
pip = ">=25.2,<26"
max = ">=25.6.0.dev2025080705,<26"
aiohttp = ">=3.12.15,<4"
aiostream = ">=0.7.0,<0.8"
jsonschema = ">=4.25.0,<5"
pixi = ">=0.50.2,<0.51"
black = ">=25.1.0,<26"
flake8 = ">=7.3.0,<8"
isort = ">=6.0.1,<7"
mypy = ">=1.17.1,<2"
bandit = ">=1.8.6,<2"
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"
pytest-mock = ">=3.14.1,<4"
pytest-asyncio = ">=1.1.0,<2"
pytest-subprocess = ">=1.5.3,<2"
pytest-timeout = ">=2.4.0,<3"
pytest-xdist = ">=3.8.0,<4"
mcp = ">=1.12.3,<2"
maven = ">=3.9.10,<4"
openjdk = ">=23.0.2,<24"
openai = ">=1.99.1,<2"
sympy = ">=1.14.0,<2"
numpy = ">=2.3.2,<3"
scipy = ">=1.14.0,<2"
transformers = ">=4.55.0,<5"
vaderSentiment = ">=3.3.2,<4"
requests = ">=2.32.4,<3"
